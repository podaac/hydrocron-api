openapi: 3.0.1
info:
  title: podaac-hydrocron
  version: 1.0.0
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://hydrocron.podaac.earthdata.nasa.gov/'
    description: Production
  - url: 'https://hydrocron.podaac.uat.earthdata.nasa.gov/'
    description: User Acceptance
paths:
  /timeseries:
    get:
      summary: "Get Timeseries for a particular Reach, Node, or LakeID"
      description: "Get Timeseries for a particular Reach, Node, or LakeID"
      operationId: gettimeseries_get
      parameters:
      - name: feature
        in: query
        description: Data requested for Reach or Node or Lake
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum: [ "Reach", "Lake", "Node"]
        example: Reach
      - name: feature_id
        in: query
        description: ID of the feature to retrieve in format CBBTTTSNNNNNN (i.e. 74297700000000)
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: 71224100223
      - name: start_time
        in: query
        description: Start time of the timeseries
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: date-time
        example: 2022-08-04T00:00:00Z
      - name: end_time
        in: query
        description: End time of the timeseries
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: date-time
        example: 2022-08-23T00:00:00Z
      - name: output
        in: query
        description: Format of the data returned
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum: [ "csv", "geojson"]
          default: geojson
        example: geojson
      - name: fields
        in: query
        description: Format of the data returned
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: feature_id, time_str, wse, geometry
        example: feature_id, time_str, wse, geometry
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ClientError'
        '404':
          $ref: '#/components/responses/NotFound'
        '413':
          $ref: '#/components/responses/ClientError'
        '500':
          $ref: '#/components/responses/ServerError'
      x-amazon-apigateway-integration:
        uri: ${hydrocronapi_lambda_arn}
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                #if($inputRoot.toString().contains('206 PARTIAL CONTENT'))
                  #set($context.responseOverride.status = 206)
                #end
                $input.json('$')
          ^400.*:
            statusCode: "400"
            responseTemplates:
              application/json: |-
                {
                  "error" : "$input.path('$.errorMessage')"
                }
          ^404.*:
            statusCode: "404"
            responseTemplates:
              application/json: |-
                {
                  "error" : "$input.path('$.errorMessage')"
                }
          ^413.*:
            statusCode: "413"
            responseTemplates:
              application/json: |-
                {
                  "error" : "$input.path('$.errorMessage')"
                }
          ^[^1-5].*:
            statusCode: "500"
            responseTemplates:
              application/json: |-
                {
                  "error" : "$input.path('$.errorMessage')"
                }
        requestTemplates:
          application/json: |-
            {
              "body": {
                "feature":"$input.params('feature')",
                "feature_id":"$input.params('feature_id')",
                "start_time":"$input.params('start_time')",
                "end_time":"$input.params('end_time')",
                "output": "$input.params('output')",
                "fields": "$input.params('fields')",
                "exact":"$input.params('exact')",
                "page_number": "$input.params('page_number')" ,
                "page_size": "$input.params('page_size')" 
              }
            }
        passthroughBehavior: when_no_templates
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws
  /timeseriesSubset:
    get:
      summary: Subset by time series for a given spatial region
      description: "Get Timeseries for a particular Reach, Node, or LakeID"
      operationId: getsubset_get
      parameters:
      - name: feature
        in: query
        description: Data requested for Reach or Node or Lake
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum: [ "Reach", "Lake", "Node"]
        example: Reach
      - name: subsetpolygon
        in: query
        description: GEOJSON of the subset area
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: '{"features": [{"type": "Feature","geometry": {"coordinates": [[-95.6499095054704,50.323685647314554],[-95.3499095054704,50.323685647314554],[-95.3499095054704,50.19088502467528],[-95.6499095054704,50.19088502467528],[-95.6499095054704,50.323685647314554]],"type": "LineString"},"properties": {}}],"type": "FeatureCollection"}'
      - name: start_time
        in: query
        description: Start time of the timeseries
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: date-time
        example: 2022-08-04T00:00:00Z
      - name: end_time
        in: query
        description: End time of the timeseries
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: date-time
        example: 2022-08-23T00:00:00Z
      - name: output
        in: query
        description: Format of the data returned
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum: [ "csv", "geojson"]
          default: geojson
        example: geojson
      - name: fields
        in: query
        description: Format of the data returned
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: feature_id, time_str, wse, geometry
        example: feature_id, time_str, wse, geometry
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/ClientError'
        '404':
          $ref: '#/components/responses/NotFound'
        '413':
          $ref: '#/components/responses/ClientError'
        '500':
          $ref: '#/components/responses/ServerError'
      x-amazon-apigateway-integration:
        uri: ${hydrocronapi_lambda_arn}
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                #if($inputRoot.toString().contains('206 PARTIAL CONTENT'))
                  #set($context.responseOverride.status = 206)
                #end
                $input.json('$')
          ^400.*:
            statusCode: "400"
            responseTemplates:
              application/json: |-
                {
                  "error" : "$input.path('$.errorMessage')"
                }
          ^404.*:
            statusCode: "404"
            responseTemplates:
              application/json: |-
                {
                  "error" : "$input.path('$.errorMessage')"
                }
          ^413.*:
            statusCode: "413"
            responseTemplates:
              application/json: |-
                {
                  "error" : "$input.path('$.errorMessage')"
                }
          ^[^1-5].*:
            statusCode: "500"
            responseTemplates:
              application/json: |-
                {
                  "error" : "$input.path('$.errorMessage')"
                }
        requestTemplates:
          application/json: |-
            {
              "body": {
                "feature":"$input.params('feature')",
                "subsetpolygon":"$input.params('subsetpolygon')",
                "start_time":"$input.params('start_time')",
                "end_time":"$input.params('end_time')",
                "output": "$input.params('output')",
                "fields": "$input.params('fields')",
                "exact":"$input.params('exact')",
                "page_number": "$input.params('page_number')" ,
                "page_size": "$input.params('page_size')" 
              }
            }
        passthroughBehavior: when_no_templates
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws
components:
  responses:
    Success:
      description: Success Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    ClientError:
      description: 400 response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: 404 response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: 500 response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Empty:
      title: Empty Schema
      type: object
    Error:
      type: object
      properties:
        error:
          type: string
    SuccessResponse:
      title: Success Response Body
      type: object
      properties:
        status:
          type: string
          description: HTTP Status code returned by backend
        time:
          type: string
          description: Time in milliseconds to complete request
        hits:
          type: integer
          description: Total number of results
        results_count:
          type: integer
          description: Number of result entries returned in this request. Only appears if hits > page_size
        results:
          type: object
          description: Single object where each property of the object is a result
x-amazon-apigateway-policy:
  Version: '2012-10-17'
  Statement:
    - Effect: Allow
      Principal: '*'
      Action: 'execute-api:Invoke'
      Resource: '*'
    - Effect: Deny
      Principal: '*'
      Action: 'execute-api:Invoke'
      Resource: '*'
      Condition:
        StringNotEquals:
          'aws:SourceVpc': ${vpc_id}
