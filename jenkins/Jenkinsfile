pipeline {
    agent none
    options {
        preserveStashes(buildCount: 5)
    }
    environment{
        VCS_CREDENTIALS_ID = "github.jpl.nasa.gov_devops_pw"
        ARTIFACTORY_CREDENTIALS_ID = "jenkins.cae.artifactory"
        ARTIFACTORY_URL = "https://cae-artifactory.jpl.nasa.gov/artifactory"
        ARTIFACTORY_DOCKER_REGISTRY = "cae-artifactory.jpl.nasa.gov:16003"
        ECC_NEXUS_CREDENTIALS_ID = "earthdata.nexus"
        ECC_NEXUS_HOST = "maven.earthdata.nasa.gov"
        SNYK_TOKEN_ID = "snyk_api_key"
    }
    stages{
        stage("Checkout"){
            agent {
                docker {
                    image "${env.ARTIFACTORY_DOCKER_REGISTRY}/podaac/service/build-poetry-1.1.8"
                    label 'devops1'
                    args '-v /home/cm/.aws:/home/dockeruser/.aws:ro'
                }
            }
            steps{
                checkout([
                    $class: 'GitSCM',
                    branches: scm.branches,
                    extensions: scm.extensions + [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'LocalBranch', localBranch: '**'],
                        [$class: 'PruneStaleBranch']
                    ],
                    userRemoteConfigs: scm.userRemoteConfigs
                ])
                script{
                    the_service = sh(returnStdout: true, script: "poetry version | awk '{print \$1}'").trim()
                    the_version = sh(returnStdout: true, script: "poetry version | awk '{print \$2}'").trim()
                    the_env = sh(returnStdout: true, script: "printenv").trim()
                }
                writeYaml file: 'build-info.yaml', data: ['service_name': the_service, 'source_service_version': the_version, 'build_environment': the_env ], overwrite: true
                stash name: 'build-info', includes: 'build-info.yaml'
                echo "Checked out $the_service $the_version "
            }
        }
        stage("Skip Build"){
            when {
                anyOf{
                    changelog '^/version.*'
                    changelog '^/jenkins skip'
                }
            }
            agent {
                docker {
                    image "${env.ARTIFACTORY_DOCKER_REGISTRY}/podaac/service/build-poetry-1.1.8"
                    label 'devops1'
                    args '-v /home/cm/.aws:/home/dockeruser/.aws:ro'
                }
            }
            steps{
                script {
                    currentBuild.result = 'NOT_BUILT'
                }
                echo "Build Skipped."
            }
        }
        stage("Run Build"){
            when {
                not{
                    anyOf{
                        changelog '^/version.*'
                        changelog '^/jenkins skip'
                    }
                }
            }
            agent {
                docker {
                    image "${env.ARTIFACTORY_DOCKER_REGISTRY}/podaac/service/build-poetry-1.1.8"
                    label 'devops1'
                    args '-v /home/cm/.aws:/home/dockeruser/.aws:ro'
                }
            }
            stages{
                stage("Version"){
                    stages {
                        stage("Pre Alpha"){
                            when {
                                anyOf{
                                    branch 'feature/*'
                                    changeRequest target: 'develop'
                                }
                            }
                            environment {
                                 GIT_COMMIT_SHORT = sh(script: "printf \$(git rev-parse --short ${GIT_COMMIT})", returnStdout: true).trim()
                            }
                            steps{
                                unstash name: 'build-info'
                                sh "poetry version \$(poetry version | awk \'{print \$2 \"+${GIT_COMMIT_SHORT}\"}\')"
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    the_version = sh(returnStdout: true, script: "poetry version | awk '{print \$2}'").trim()
                                    build_info.build_service_version = the_version
                                }
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                        stage("Alpha"){
                            when {
                                branch 'develop'
                            }
                            steps{
                                unstash name: 'build-info'
                                sh "poetry version prerelease"
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    the_version = sh(returnStdout: true, script: "poetry version | awk '{print \$2}'").trim()
                                    build_info.build_service_version = the_version
                                }
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                        stage("Minor"){
                            when {
                                allOf{
                                    branch 'release/*'
                                    not{
                                        changeRequest()
                                    }
                                }
                            }
                            steps{
                                dir("temp"){
                                    withCredentials([usernamePassword(credentialsId: env.VCS_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                                        checkout([
                                            $class: 'GitSCM',
                                            branches: [[name: 'develop']],
                                            extensions: [
                                                [$class: 'LocalBranch', localBranch: '**']
                                            ],
                                            userRemoteConfigs: scm.userRemoteConfigs
                                        ])

                                        sh('''
                                            poetry version minor
                                            poetry version preminor
                                        ''')
                                        script{
                                            dev_version = sh(returnStdout: true, script: "poetry version | awk '{print \$2}'").trim()
                                        }
                                        sh("""
                                            git config --local user.name "podaac-cloud-dsa"
                                            git config --local user.email podaac-cloud-dsa@jpl.nasa.gov
                                            git config --local credential.helper "!f() { echo username=\$GIT_USERNAME; echo password=\$GIT_PASSWORD; }; f"
                                            git commit -am '/version ${dev_version}'
                                            git push origin HEAD:develop
                                        """)
                                    }
                                    deleteDir()
                                }
                            }
                        }
                        stage("Release Candidate"){
                            when {
                                changeRequest target: 'master'
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    cur_ver = build_info['source_service_version']
                                    if(cur_ver.contains("rc")){
                                        sh "poetry version prerelease"
                                    }else{
                                        sh "poetry version ${env.CHANGE_BRANCH.split('/')[-1]}-rc.1"
                                    }
                                    the_version = sh(returnStdout: true, script: "poetry version | awk '{print \$2}'").trim()
                                    build_info.build_service_version = the_version
                                }
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                        stage("Release"){
                            when {
                                branch 'master'
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    the_version = build_info['source_service_version'].split('-')[0]
                                    build_info.build_service_version = the_version
                                }
                                sh "poetry version $the_version"
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                    }
                }
                stage("Install"){
                    // Need to install the project before running tests against it.
                    steps{
                        sh 'poetry install'
                    }
                }
                stage("Test"){
                    stages {
                        stage("Validate"){
                            parallel {
                                stage('PyLint') {
                                    steps{
                                        sh "poetry run pylint podaac"
                                    }
                                }
                                stage('Flake8') {
                                    steps{
                                        sh "poetry run flake8 podaac"
                                    }
                                }
                                stage('Test') {
                                    steps{
                                        sh 'poetry run pytest --junitxml=build/reports/pytest.xml --cov=podaac/ --cov-report=html -m "not aws and not integration" tests/'
                                    }
                                    post {
                                        always {
                                            junit 'build/reports/pytest.xml'
                                        }
                                    }
                                }
                                stage('Snyk') {
                                    steps{
                                        withCredentials([string(credentialsId: env.SNYK_TOKEN_ID, variable: 'SNYK_TOKEN')]) {
                                            sh 'snyk monitor --org=po.daac --project-name=podaac/hydrocron-api'
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                stage("Build Software"){
                    steps{
                        dir('dist'){
                            deleteDir()
                        }
                        sh("""
                            poetry build
                            poetry install
                        """)
                    }
                    post {
                        success {
                            archiveArtifacts artifacts: 'dist/*'
                            stash name: 'artifacts', includes: 'dist/*'
                        }
                    }
                }
                stage("Publish"){
                    when {
                        anyOf{
                            branch 'develop'
                            branch 'master'
                            changeRequest()
                        }
                    }
                    stages{
                        stage("Tag Version"){
                            when {
                                anyOf{
                                    branch 'develop'
                                    branch 'master'
                                    changeRequest target: 'master'
                                }
                            }
                            environment{
                                THE_BRANCH = "${(env.CHANGE_BRANCH?:env.BRANCH_NAME)}"
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                }
                                withCredentials([usernamePassword(credentialsId: env.VCS_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                                    sh("""
                                        git config --local user.name "podaac-cloud-dsa"
                                        git config --local user.email podaac-cloud-dsa@jpl.nasa.gov
                                        git config --local credential.helper "!f() { echo username=\$GIT_USERNAME; echo password=\$GIT_PASSWORD; }; f"
                                        git commit -am '/version ${build_info.build_service_version}'
                                    """)
                                    script{
                                        if(env.BRANCH_NAME == 'master'){
                                            sh "git tag -a ${build_info.build_service_version} -m 'Release of v${build_info.build_service_version}'"
                                        }else{
                                            sh "git tag ${build_info.build_service_version}"
                                        }
                                    }
                                    sh("""
                                        git push origin HEAD:${env.THE_BRANCH}
                                        git push origin ${build_info.build_service_version}
                                    """)
                                }
                            }
                            post {
                                failure {
                                    // If the push fails, delete the local tag so when the build reruns it won't fail because the tag already exists
                                    sh "git tag -d ${build_info.build_service_version}"
                                }
                            }
                        }
                        stage("Create Docs"){
                            when {
                                anyOf{
                                    branch 'feature/*'
                                    branch 'develop'
                                    branch 'master'
                                    changeRequest target: 'master'
                                }
                            }
                            environment{
                                THE_BRANCH = "${(env.CHANGE_BRANCH?:env.BRANCH_NAME)}"
                                gh_pages_branch = 'gh-pages'
                            }
                            steps{
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    the_version = build_info.build_service_version
                                }
                                dir("docs"){
                                    sh("""
                                        poetry install
                                        poetry run sphinx-build -b html . _build
                                        ls -hal
                                    """)
                                    stash includes: '_build/**', name: 'html-docs'
                                }
                                dir("temp"){
                                    withCredentials([usernamePassword(credentialsId: env.VCS_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                                        checkout([
                                            $class: 'GitSCM',
                                            branches: [[name: env.gh_pages_branch]],
                                            extensions: [
                                                [$class: 'LocalBranch', localBranch: '**']
                                            ],
                                            userRemoteConfigs: scm.userRemoteConfigs
                                        ])
                                        sh("""
                                            git config --local user.name "podaac-tva"
                                            git config --local user.email podaac-tva@jpl.nasa.gov
                                            git config --local credential.helper "!f() { echo username=\$GIT_USERNAME; echo password=\$GIT_PASSWORD; }; f"
                                        """)
                                        unstash name: 'html-docs'
                                        sh("""
                                                git reset --hard
                                                git status
                                                touch .nojekyll
                                                git add .nojekyll
                                                mv _build/ ${the_version}/
                                                git add ${the_version}/
                                                git commit -m "Publish of docs v${the_version}"
                                                git push origin ${env.gh_pages_branch}
                                        """)
                                    }
                                    deleteDir()
                                }
                            }
                            post {
                                always {
                                    sh "git config --local --unset credential.helper || true"
                                }
                            }
                        }
                        stage("Upload to Artifactory"){
                            steps{
                                unstash name: 'artifacts'
                                sh "poetry config repositories.podaac ${env.ARTIFACTORY_URL}/api/pypi/pypi-release-virtual"
                                withCredentials([usernamePassword(credentialsId: env.ARTIFACTORY_CREDENTIALS_ID, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]){
                                    sh "poetry publish -r podaac -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_PASSWORD}"
                                }
                            }
                        }
                        stage("Upload to ECC Nexus"){
                            steps{
                                unstash name: 'artifacts'
                                sh "poetry config repositories.eccnexus https://${env.ECC_NEXUS_HOST}/repository/python-repo/"
                                withCredentials([usernamePassword(credentialsId: env.ECC_NEXUS_CREDENTIALS_ID, usernameVariable: 'ECC_NEXUS_USER', passwordVariable: 'ECC_NEXUS_PASSWORD')]){
                                    sh "poetry publish -r eccnexus -u ${ECC_NEXUS_USER} -p ${ECC_NEXUS_PASSWORD}"
                                }
                            }
                        }
                    }
                }
            }
        }
        stage("Publish Docker Image"){
            when {
                beforeAgent true
                allOf{
                    not{
                        anyOf {
                            changelog '^/version.*'
                            changelog '^/jenkins skip'
                        }
                    }
                    anyOf{
                        branch 'develop'
                        changeRequest()
                        branch 'master'
                        changelog '/jenkins deploy-dev'
                    }
                }
            }
            agent {
                label 'dockerce'
            }
            stages{
                stage("Build Image"){
                    steps{
                        unstash name: 'build-info'
                        script{
                            build_info = readYaml file: 'build-info.yaml'
                        }
                        echo "Build image for ${build_info.build_service_version}"
                        unstash name: 'artifacts'
                        script{
                            build_info.docker_tag = sh(returnStdout: true, script: "./docker/build-docker.sh -n ${build_info.service_name} -v ${build_info.build_service_version}").trim()
                        }
                        writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                        stash name: 'build-info', includes: 'build-info.yaml'
                    }
                }
                stage("Publish to Artifactory"){
                    steps{
                        unstash name: 'build-info'
                        script{
                            build_info = readYaml file: 'build-info.yaml'
                        }
                        echo "Publishing ${build_info.docker_tag} to Artifactory"
                        withCredentials([usernamePassword(credentialsId: env.ARTIFACTORY_CREDENTIALS_ID, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]){
                            sh "./docker/push-docker-artifactory.sh -t ${build_info.docker_tag} -r ${env.ARTIFACTORY_DOCKER_REGISTRY} -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_PASSWORD}"
                        }
                    }
                }
            }
            post {
                success {
                    // If we push to Artifactory, remove the image to save space locally
                    unstash name: 'build-info'
                    script{
                        build_info = readYaml file: 'build-info.yaml'
                    }
                    sh("""
                        docker rmi ${build_info.docker_tag} || true
                        docker rmi ${env.ARTIFACTORY_DOCKER_REGISTRY}/${build_info.docker_tag} || true
                    """)
                }
            }
        }
        stage("Deploy"){
            when{
                allOf{
                    not{
                        anyOf {
                            changelog '^/version.*'
                            changelog '^/jenkins skip'
                        }
                    }
                    anyOf{
                        branch 'develop'
                        changeRequest target: 'master'
                        branch 'master'
                        changelog '/jenkins deploy-sit'
                        changelog '/jenkins deploy-uat'
                    }
                }
            }
            parallel {
                stage("SIT"){
                    when{
                      anyOf {
                        branch 'develop'
                        changelog '/jenkins deploy-sit'
                      }
                    }
                    environment {
                        tf_venue = 'sit'
                    }
                    stages{
                        stage("Push to ECR"){
                            agent {
                                node("devops1")
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                }
                                echo "Publishing ${build_info.docker_tag} to ECR"
                                withCredentials([usernamePassword(credentialsId: env.ARTIFACTORY_CREDENTIALS_ID, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]){
                                    sh("""
                                        docker login --username "${ARTIFACTORY_USER}" --password "${ARTIFACTORY_PASSWORD}" "${ARTIFACTORY_DOCKER_REGISTRY}"
                                        docker pull ${env.ARTIFACTORY_DOCKER_REGISTRY}/${build_info.docker_tag}
                                        docker tag ${env.ARTIFACTORY_DOCKER_REGISTRY}/${build_info.docker_tag} ${build_info.docker_tag}
                                        ./docker/push-docker-ecr.sh -v ${tf_venue} -t ${build_info.docker_tag}
                                    """)
                                }
                            }
                        }
                        stage("Terraform Apply"){
                            agent {
                                docker {
                                    image "${env.ARTIFACTORY_DOCKER_REGISTRY}/podaac/service/deploy-terraform-1.1.7"
                                    label 'devops1'
                                    args '-v /home/cm/.aws:/home/dockeruser/.aws:ro'
                                }
                            }
                            environment {
                                //to use codebuild, we need the key/secret for AWS
                                aws_key = sh(script: "aws configure get ngap-service-${env.tf_venue}.aws_access_key_id", , returnStdout: true).trim()
                                aws_secret_key = sh(script: "aws configure get ngap-service-${env.tf_venue}.aws_secret_access_key", , returnStdout: true).trim()
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                }
                                dir('terraform'){
                                    withEnv(["docker_tag=${build_info.docker_tag}"]) {
                                        sh "bin/deploy.sh -v ${tf_venue} -t ${docker_tag}"
                                    }
                                }
                                //Hack to upload latest s3 file...
                                sh "aws s3 sync tests/ s3://podaac-services-${tf_venue}-deploy/internal/hydrocron/  --profile ngap-service-${tf_venue}"

                                //Run the hydrocron Codebuild Project
                                awsCodeBuild projectName: 'hydrocron', credentialsType: 'keys', awsAccessKey: env.aws_key, awsSecretKey: env.aws_secret_key, region: 'us-west-2', sourceControlType: 'project', envParameters: '[{base_url, hydrocron-api-url}]', artifactNamespaceOverride: 'NONE', artifactPathOverride: 'internal/hydrocron/report', artifactTypeOverride: 'S3', artifactLocationOverride: "podaac-services-${tf_venue}-deploy"

                                //Copy the report back out
                                sh "aws s3 cp s3://podaac-services-${tf_venue}-deploy/internal/hydrocron/report/hydrocron/report.xml hydrocron-report.xml  --profile ngap-service-${tf_venue}"
                            }
                            post {
                                always {
                                    archiveArtifacts artifacts: 'hydrocron-report.xml', onlyIfSuccessful: true
                                }
                                regression {
                                    echo "Rollback"
                                }
                            }
                        }
                    }
                }
                stage("UAT"){
                    when {
                        changeRequest target: 'master'
                    }
                    environment {
                        tf_venue = 'uat'
                    }
                    stages{
                        stage("Push to ECR"){
                            agent {
                                node("devops1")
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                }
                                echo "Publishing ${build_info.docker_tag} to ECR"
                                withCredentials([usernamePassword(credentialsId: env.ARTIFACTORY_CREDENTIALS_ID, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]){
                                    sh("""
                                        docker login --username "${ARTIFACTORY_USER}" --password "${ARTIFACTORY_PASSWORD}" "${ARTIFACTORY_DOCKER_REGISTRY}"
                                        docker pull ${env.ARTIFACTORY_DOCKER_REGISTRY}/${build_info.docker_tag}
                                        docker tag ${env.ARTIFACTORY_DOCKER_REGISTRY}/${build_info.docker_tag} ${build_info.docker_tag}
                                        ./docker/push-docker-ecr.sh -v ${tf_venue} -t ${build_info.docker_tag}
                                    """)
                                }
                            }
                        }
                        stage("Terraform Apply"){
                            agent {
                                docker {
                                    image "${env.ARTIFACTORY_DOCKER_REGISTRY}/podaac/service/deploy-terraform-1.1.7"
                                    label 'devops1'
                                    args '-v /home/cm/.aws:/home/dockeruser/.aws:ro'
                                }
                            }
                            environment {
                                //to use codebuild, we need the key/secret for AWS
                                aws_key = sh(script: "aws configure get ngap-service-${env.tf_venue}.aws_access_key_id", , returnStdout: true).trim()
                                aws_secret_key = sh(script: "aws configure get ngap-service-${env.tf_venue}.aws_secret_access_key", , returnStdout: true).trim()
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                }
                                dir('terraform'){
                                    withEnv(["docker_tag=${build_info.docker_tag}"]) {
                                        sh "bin/deploy.sh -v ${tf_venue} -t ${docker_tag}"
                                    }
                                }

                                //Hack to upload latest s3 file...
                                sh "aws s3 sync tests/ s3://podaac-services-${tf_venue}-deploy/internal/hydrocron/  --profile ngap-service-${tf_venue}"

                                //Run the hydrocron Codebuild Project
                                awsCodeBuild projectName: 'hydrocron', credentialsType: 'keys', awsAccessKey: env.aws_key, awsSecretKey: env.aws_secret_key, region: 'us-west-2', sourceControlType: 'project', envParameters: '[{base_url, hydrocron-api-url}]', artifactNamespaceOverride: 'NONE', artifactPathOverride: 'internal/hydrocron/report', artifactTypeOverride: 'S3', artifactLocationOverride: "podaac-services-${tf_venue}-deploy"

                                //Copy the report back out
                                sh "aws s3 cp s3://podaac-services-${tf_venue}-deploy/internal/hydrocron/report/hydrocron/report.xml hydrocron-report.xml  --profile ngap-service-${tf_venue}"
                            }
                            post {
                                always {
                                    archiveArtifacts artifacts: 'hydrocron-report.xml', onlyIfSuccessful: true
                                }
                                regression {
                                    echo "Rollback"
                                }
                            }
                        }
                    }
                }
                stage("OPS"){
                    when {
                        branch 'master'
                    }
                    environment {
                        tf_venue = 'ops'
                    }
                    stages{
                        stage("Push to ECR"){
                            agent {
                                node("devops1")
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                }
                                echo "Publishing ${build_info.docker_tag} to ECR"
                                withCredentials([usernamePassword(credentialsId: env.ARTIFACTORY_CREDENTIALS_ID, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]){
                                    sh("""
                                        docker login --username "${ARTIFACTORY_USER}" --password "${ARTIFACTORY_PASSWORD}" "${ARTIFACTORY_DOCKER_REGISTRY}"
                                        docker pull ${env.ARTIFACTORY_DOCKER_REGISTRY}/${build_info.docker_tag}
                                        docker tag ${env.ARTIFACTORY_DOCKER_REGISTRY}/${build_info.docker_tag} ${build_info.docker_tag}
                                        ./docker/push-docker-ecr.sh -v ${tf_venue} -t ${build_info.docker_tag}
                                    """)
                                }
                            }
                        }
                        stage("Terraform Apply"){
                            agent {
                                docker {
                                    image "${env.ARTIFACTORY_DOCKER_REGISTRY}/podaac/service/deploy-terraform-1.1.7"
                                    label 'devops1'
                                    args '-v /home/cm/.aws:/home/dockeruser/.aws:ro'
                                }
                            }
                            environment {
                                //to use codebuild, we need the key/secret for AWS
                                aws_key = sh(script: "aws configure get ngap-service-${env.tf_venue}.aws_access_key_id", , returnStdout: true).trim()
                                aws_secret_key = sh(script: "aws configure get ngap-service-${env.tf_venue}.aws_secret_access_key", , returnStdout: true).trim()
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                }
                                dir('terraform'){
                                    withEnv(["docker_tag=${build_info.docker_tag}"]) {
                                        sh "bin/deploy.sh -v ${tf_venue} -t ${docker_tag}"
                                    }
                                }

                                //Hack to upload latest s3 file...
                                sh "aws s3 sync tests/ s3://podaac-services-${tf_venue}-deploy/internal/hydrocron/  --profile ngap-service-${tf_venue}"

                                //Run the hydrocron Codebuild Project
                                awsCodeBuild projectName: 'hydrocron', credentialsType: 'keys', awsAccessKey: env.aws_key, awsSecretKey: env.aws_secret_key, region: 'us-west-2', sourceControlType: 'project', envParameters: '[{base_url, hydrocron-api-url}]', artifactNamespaceOverride: 'NONE', artifactPathOverride: 'internal/hydrocron/report', artifactTypeOverride: 'S3', artifactLocationOverride: "podaac-services-${tf_venue}-deploy"

                                //Copy the report back out
                                sh "aws s3 cp s3://podaac-services-${tf_venue}-deploy/internal/hydrocron/report/hydrocron/report.xml hydrocron-report.xml  --profile ngap-service-${tf_venue}"
                            }
                            post {
                                always {
                                    archiveArtifacts artifacts: 'hydrocron-report.xml', onlyIfSuccessful: true
                                }
                                regression {
                                    echo "Rollback"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
